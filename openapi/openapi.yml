openapi: 3.0.0
info:
  description: |
    > This `draft` version represents the next release of the API.

    Provides an interface for calculating charges, creating and queuing transactions, and generating transaction and customer files used to produce Environment Agency invoices.

    ## Working with the API

    The [SROC service team](https://github.com/DEFRA/sroc-service-team) use [Postman](https://www.postman.com/) as the means to interact with the API. Check out their [docs](https://github.com/DEFRA/sroc-service-team/postman) for info on how to go about setting up your own Postman environment.

    ## Running the API locally

    The **SROC service team** also provide a [Docker image](https://hub.docker.com/r/environmentagency/sroc-charging-module-api) you can use to run the API locally. Checkout out their [docs](https://github.com/DEFRA/sroc-service-team/tree/main/dockerhub/version_2) for info on how to get it up and running locally.

  version: "draft"
  title: SROC Charging Module API
  contact:
    name: SROC Service Team
    email: alan.cruikshanks@environment-agency.gov.uk
    url: 'https://github.com/DEFRA/sroc-service-team'
  license:
    name: Open Government Licence (OGL)
    url: 'http://www.nationalarchives.gov.uk/doc/open-government-licence/version/3'
servers:
  - description: Local
    url: 'http://localhost:3003'

tags:
  - name: bill-run
    description: "Operations related to bill runs"
  - name: calculate
    description: "Operations related to calculating charges"
  - name: customer
    description: "Operations related to customer files"
  - name: unavailable
    description: "These will become available eventually but are yet to be fully implemented"
  - name: admin
    description: "Used to administer, monitor, and test the service. Only available when authenticating as an 'admin'"
  - name: status
    description: "Endpoints that can be used to confirm the status of the API or by automated 'health checks'"

paths:
  /:
    get:
      operationId: Root
      description: "Confirm service is up and running. Exactly the same as `/status`"
      tags:
        - status
      responses:
        '200':
          description: "Success"
          content:
            application/json:
              schema:
                $ref: 'schema/schemas.yml#/status'

  /status:
    $ref: 'paths/status.yml'

  '/admin/regimes':
    $ref: 'paths/admin/regimes.yml'

  '/admin/regimes/{regimeId}':
    $ref: 'paths/admin/regime.yml'

  '/admin/authorised-systems':
    $ref: 'paths/admin/authorised_systems.yml'

  '/admin/authorised-systems/{authorisedSystemId}':
    $ref: 'paths/admin/authorised_system.yml'

  '/admin/{regime}/customers':
    $ref: 'paths/admin/customers.yml'

  '/admin/health/airbrake':
    $ref: 'paths/admin/health/airbrake.yml'

  '/admin/health/database':
    $ref: 'paths/admin/health/database.yml'

  '/admin/test/{regime}/bill-runs':
    $ref: 'paths/admin/test/bill_runs.yml'

  '/admin/test/{regime}/customers':
    $ref: 'paths/admin/test/customers.yml'

  '/admin/test/customers/{customerFileId}':
    $ref: 'paths/admin/test/customer.yml'

  '/admin/test/transaction/{transactionId}':
    $ref: 'paths/admin/test/transaction.yml'

  '/v2/{regime}/bill-runs':
    $ref: 'paths/v2/bill_runs/bill_runs.yml'

  '/v2/{regime}/bill-runs/{billrunId}/transactions':
    $ref: 'paths/v2/bill_runs/transactions/bill_run_transactions.yml'

  '/v2/{regime}/bill-runs/{billrunId}':
    $ref: 'paths/v2/bill_runs/bill_run.yml'

  '/v2/{regime}/bill-runs/{billrunId}/generate':
    $ref: 'paths/v2/bill_runs/bill_run_generate.yml'

  '/v2/{regime}/bill-runs/{billrunId}/status':
    $ref: 'paths/v2/bill_runs/bill_run_status.yml'

  '/v2/{regime}/bill-runs/{billrunId}/approve':
    $ref: 'paths/v2/bill_runs/bill_run_approve.yml'

  '/v2/{regime}/bill-runs/{billrunId}/send':
    $ref: 'paths/v2/bill_runs/bill_run_send.yml'

  '/v2/{regime}/bill-runs/{billrunId}/invoices/{invoiceId}':
    $ref: 'paths/v2/bill_runs/invoices/invoice.yml'

  '/v2/{regime}/calculate-charge':
    $ref: 'paths/v2/calculate_charge/calculate_charge.yml'

  '/v2/{regime}/customer-changes':
    $ref: 'paths/v2/customer_changes/customer_changes.yml'

  '/v2/{regime}/bill-runs/{rebillBillrunId}/invoices/{rebillInvoiceId}/rebill':
    $ref: 'paths/v2/bill_runs/invoices/invoice_rebill.yml'

  '/v2/{regime}/bill-runs/{billrunId}/licences/{licenceId}':
    $ref: 'paths/v2/bill_runs/licences/licence.yml'

security:
  - OAuth2: []

components:
  securitySchemes:
    OAuth2:
      type: oauth2
      description: "The API uses [AWS Cognito](https://docs.aws.amazon.com/cognito/latest/developerguide/what-is-amazon-cognito.html) to manage authentication and authorisation. To use it you will first need a cognito client ID and password. You then use these to request a bearer token from AWS Cognito. The bearer token is then sent in the `Authorisation` header of your request"
      flows:
        clientCredentials:
          tokenUrl: 'https://chargingmoduleapi.auth.eu-west-1.amazoncognito.com/oauth2/token'
          scopes: {}
