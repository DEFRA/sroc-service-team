openapi: 3.0.0
info:
  description: |
    > This `draft` version represents the next release of the API.

    Provides an interface for calculating charges, creating and queuing transactions, and generating transaction and customer files used to produce Environment Agency invoices.

    ## Overview

    The Environment Agency's customers are invoiced from the SSCL SOP system. The invoices are based on transaction files imported by SOP that contain details of which customers need invoicing or crediting and for how much. The Charging Module (CM) was built to generate those transaction files.

    It does this based on individual **transaction** information which client systems send to it. These are grouped under a **bill run**. When 'generated' each **bill run** will result in a transaction file.

    > There are exceptions to this but we'll cover them later!

    When a **transaction** is sent to the CM it calls a 'rules service' using a mix of information from the request and values it works out. That service will work out the 'charge' for the transaction and return it to the CM.

    Once all the **transactions** are in the **bill run** can be 'generated'. The **transactions** are grouped by customer and financial year and then the CM applies various rules to the grouping, determined by the **regime** the **bill run** is for. The result is an invoice or credit note that is ready to be 'sent' to SSCL via the transaction file.

    The exceptions are invoice or credit notes that have 0 value or that don't meet a certain threshold again determined by the rules for the **regime**.

    ### Customer changes

    To ensure invoices get to customers SSCL needs to have up-to-date customer details. The CM also provides a mechanism for client systems to tell SSCL about any new customers or changes to customer details using another import file. The changes are logged by the CM and the next time a **bill run** for the same area as the customer is 'sent' their changes will be added to that file for import by SSCL SOP.

    In case no matching **bill runs** are 'sent' that week, the CM also creates the customer import file once a week for any changes that didn't get picked up.

    ## Workflows

    The endpoints the API provide are intended to support a workflow that sees a **bill run** move from being created to being sent as a transaction file to SSCL for invoicing.

    The following assumes everything went as planned with no need for changes before sending the transaction file to SSCL.

    > **Create** `->` **Add (transactions)** `->` **Generate** `->` **Approve** `->` **Send**

    It starts with creating a new **bill run**. From then on all actions will relate to that **bill run**, whether its adding **transactions**, 'generating' the **bill run** or 'sending' it to SSCL.

    - `POST /v2/{regime}/bill-runs` Create a new **bill run**. It will return the **bill run's** ID which will be needed in all subsequent requests
    - `POST /v2/{regime}/bill-runs/{billRunId}/transactions'` Create a **transaction** against the **bill run**. The CM will use the 'rules service' to calculate the **transaction's** charge value
    - `PATCH /v2/{regime}/bill-runs/{billRunId}/generate` Tell the CM to 'generate' the **bill run**. This involves applying a series of **regime** specific rules against the transactions in the **bill run**. From it the final invoice or credit note values will be determined
    - `PATCH /v2/{regime}/bill-runs/{billRunId}/approve` Confirm to the CM that the **bill run** has been checked and approved for sending to SSCL
    - `PATCH /v2/{regime}/bill-runs/{billRunId}/send` Tell the CM to generate the transaction file ready for importing by SSCL SOP

    There are various `GET` endpoints that can be used to query the status or contents of a **bill run** at all stages. But these requests are the minimum needed to get a transaction file to SSCL SOP.

    ### Amending a bill run

    Up till a **bill run** is 'approved' it can be amended. This means deleting **invoices** or **licences**, adding new **transactions**, or deleting the **bill run** altogether.

    - `DELETE /v2/{regime}/bill-runs/{billRunId}/invoices/{invoiceId}`
    - `DELETE /v2/{regime}/bill-runs/{billRunId}/licences/{licenceId}`
    - `POST /v2/{regime}/bill-runs/{billRunId}/transactions'`
    - `DELETE /v2/{regime}/bill-runs/{billRunId}`

    When invoices or licences are removed, if a **bill run** has been generated the CM will automatically handle updating the bill run summary information.

    If a transaction is added to a **bill run** it means the invoice needs to be recalculated, which in turn means the **bill run** details need recalculating. So, in this case the CM will re-initialise the **bill run** and the client system is expected to call the **bill run** `/generate` endpoint again.

    ## Rules

    When the CM is 'generating' a **bill run** it applies various rules to each invoice to determine its final value and whether it should be included in the transaction file sent to SSCL SOP.

    ### Deminimis

    Invoices with a total value less than £5 are not issued to the customer and hence do not appear in a transaction file. This rule applies only to invoices (where the value is positive); credit notes under £5 are issued to the customer as usual.

    ### Minimum charge

    Some regimes support the idea of a minimum charge, for example, when a new licence is created so the customer is being charged for the first time. Transactions that are subject to this can be flagged as `subjectToMinimumCharge`. When the total value of these transactions falls below £25, a minimum charge rule is applied. This results in the creation of an additional transaction equal to the difference between £25 and the originally calculated total value.

    To determine the total the transactions are grouped

    - customer reference
    - financial year
    - licence number
    - transaction type (credit or debit)

    Plus they must be flagged as `subjectToMinimumCharge`. Transactions that have the same details but ***don't*** have this flag set will not be grouped when determing the total.

    _It is the responsibility of the client system to tell the CM whether a **transaction** is subject to minimum charge._

    ### Zero value

    Invoices with a net value of zero (£0) are not issued to the customer and hence do not need to appear in a transaction file. This rule is distinct from the [deminimis rule](#deminimis), meaning that zero value invoices are not flagged as deminimis.

    ## Developing against the API

    In order to develop a client system that uses the API you'll want to understand how to make requests and try them out. We hope the following will help with that.

    ### Talking to INTEGRATION

    We have an AWS `INTEGRATION` environment setup and available specifically for client systems to use. For access contact the [Charging Module team](alan.cruikshanks@defra.gov.uk).

    ### Running the API locally

    The [Charging Module team](https://github.com/DEFRA/sroc-service-team) also provide a [Docker image](https://hub.docker.com/r/environmentagency/sroc-charging-module-api) you can use to run the API locally. Checkout out their [docs](https://github.com/DEFRA/sroc-service-team/tree/main/dockerhub) for info on how to get it up and running locally.

    ### Talking to the API

    The **Charging Module team** use [Postman](https://www.postman.com/) as the means to interact with the API. Check out their [docs](https://github.com/DEFRA/sroc-service-team/postman) for info on how to go about setting up your own Postman environment.

  version: "draft"
  title: SROC Charging Module API
  contact:
    name: Charging Module team
    email: alan.cruikshanks@defra.gov.uk
    url: 'https://github.com/DEFRA/sroc-service-team'
  license:
    name: Open Government Licence (OGL)
    url: 'http://www.nationalarchives.gov.uk/doc/open-government-licence/version/3'
servers:
  - description: Local
    url: 'http://localhost:3003'

tags:
  - name: bill-run
    description: "Operations related to bill runs"
  - name: calculate
    description: "Operations related to calculating charges"
  - name: customer
    description: "Operations related to customer files"
  - name: unavailable
    description: "These will become available eventually but are yet to be fully implemented"
  - name: admin
    description: "Used to administer, monitor, and test the service. Only available when authenticating as an 'admin'"
  - name: status
    description: "Endpoints that can be used to confirm the status of the API or by automated 'health checks'"

paths:
  /:
    get:
      operationId: Root
      description: "Confirm service is up and running. Exactly the same as `/status`"
      tags:
        - status
      responses:
        '200':
          description: "Success"
          content:
            application/json:
              schema:
                $ref: 'schema/schemas.yml#/status'

  /status:
    $ref: 'paths/status.yml'

  '/admin/regimes':
    $ref: 'paths/admin/regimes.yml'

  '/admin/regimes/{regimeId}':
    $ref: 'paths/admin/regime.yml'

  '/admin/authorised-systems':
    $ref: 'paths/admin/authorised_systems.yml'

  '/admin/authorised-systems/{authorisedSystemId}':
    $ref: 'paths/admin/authorised_system.yml'

  '/admin/{regime}/bill-runs/{billRunId}/send':
    $ref: 'paths/admin/bill_runs.yml'

  '/admin/{regime}/customers':
    $ref: 'paths/admin/customers.yml'

  '/admin/health/airbrake':
    $ref: 'paths/admin/health/airbrake.yml'

  '/admin/health/database':
    $ref: 'paths/admin/health/database.yml'

  '/admin/test/{regime}/bill-runs':
    $ref: 'paths/admin/test/bill_runs.yml'

  '/admin/test/{regime}/customer-files':
    $ref: 'paths/admin/test/customers.yml'

  '/admin/test/customer-files/{customerFileId}':
    $ref: 'paths/admin/test/customer.yml'

  '/admin/test/data-export':
    $ref: 'paths/admin/test/data_export.yml'

  '/admin/test/transaction/{transactionId}':
    $ref: 'paths/admin/test/transaction.yml'

  '/v2/{regime}/bill-runs':
    $ref: 'paths/v2/bill_runs/bill_runs.yml'

  '/v3/{regime}/bill-runs':
    $ref: 'paths/v3/bill_runs/bill_runs.yml'

  '/v2/{regime}/bill-runs/{billRunId}/transactions':
    $ref: 'paths/v2/bill_runs/transactions/bill_run_transactions.yml'

  '/v2/{regime}/bill-runs/{billRunId}':
    $ref: 'paths/v2/bill_runs/bill_run.yml'

  '/v2/{regime}/bill-runs/{billRunId}/generate':
    $ref: 'paths/v2/bill_runs/bill_run_generate.yml'

  '/v2/{regime}/bill-runs/{billRunId}/status':
    $ref: 'paths/v2/bill_runs/bill_run_status.yml'

  '/v2/{regime}/bill-runs/{billRunId}/approve':
    $ref: 'paths/v2/bill_runs/bill_run_approve.yml'

  '/v2/{regime}/bill-runs/{billRunId}/send':
    $ref: 'paths/v2/bill_runs/bill_run_send.yml'

  '/v2/{regime}/bill-runs/{billRunId}/invoices/{invoiceId}':
    $ref: 'paths/v2/bill_runs/invoices/invoice.yml'

  '/v2/{regime}/calculate-charge':
    $ref: 'paths/v2/calculate_charge/calculate_charge.yml'

  '/v2/{regime}/customer-changes':
    $ref: 'paths/v2/customer_changes/customer_changes.yml'

  '/v2/{regime}/customer-files/{days}':
    $ref: 'paths/v2/customer_files/customer_files.yml'

  '/v2/{regime}/bill-runs/{rebillBillRunId}/invoices/{rebillInvoiceId}/rebill':
    $ref: 'paths/v2/bill_runs/invoices/invoice_rebill.yml'

  '/v2/{regime}/bill-runs/{billRunId}/licences/{licenceId}':
    $ref: 'paths/v2/bill_runs/licences/licence.yml'

security:
  - OAuth2: []

components:
  securitySchemes:
    OAuth2:
      type: oauth2
      description: "The API uses [AWS Cognito](https://docs.aws.amazon.com/cognito/latest/developerguide/what-is-amazon-cognito.html) to manage authentication and authorisation. To use it you will first need a cognito client ID and password. You then use these to request a bearer token from AWS Cognito. The bearer token is then sent in the `Authorisation` header of your request"
      flows:
        clientCredentials:
          tokenUrl: 'https://chargingmoduleapi.auth.eu-west-1.amazoncognito.com/oauth2/token'
          scopes: {}
